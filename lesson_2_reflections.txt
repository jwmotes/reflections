What happens when you initialize a repository?  Why do you need to do it?  Initiating a repo creates the baseline to version control the work or code.  It creates the baseline by creating .git directory where all of the necessary files that allows for the version control to work are stored.  
How is the staging area different from the working directory and the repository?  What value do you think it offers?  The staging area allows for seperation from the working directory, and allows for work to occur.  It provides a safe space to conduct the work and then get it ready to creat another commit.  
What is detached head state?  This is a condition to where the master commit still exists, but a coder is exploring a past commit in the repository.  While the past commit is the current head, it allows the coder to check out the code at that point for all files in the repo during that particular past commit.  A coder has the oppurtunity to go back to the master commit by using the command git checkout master.  
How can you use the staging area to make sure you have one commit per logical change?  Only use the staging area for one logical change.  Once the coder is confident in the one logical change, then commit the staging area.  This will leave all other work that might be in the working directory by itself and not a part of the working repository.  
What are some situations when branches would be helpful in keeping your history organized?  How would branches help?  Creating branches provided freedom for coders to apply changes to the code base while preserving the operational or master state of code.  
How do the diagrams help you visualize the branch structure?  It acts like a map to help keep track of the associations between the branches and the commits.  
What is the result of merging two branches together?  Why do we represent it in the diagram the way we do?  Merging two branches brings the code changes of each branch together into one repository.  We use diagrams to help sort out the changes and where and what branch that they came from.  It also helps to keep track of parents of each branch.  
Merge commits have multiple parents.  
What are the pros and cons of Git's automatic merging vs. always doing merges manually?  The automatic merging is quick and wonderfull, until there is a conflict. When there is a conflict, I want Git to let me know so I can resolve it manually to ensure that the merge is successful.  
