When would you want to create a remote repository rather than keeping all your work local?  A remote repository is necessary to fascillitate collaboration with other individuals on a team as well as a way to keep your repo in a remotely accessible place that isn't tied down to whatever machine one may be using.  
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?  You want control over what updates go up to GitHub, as they might affect the operational program.  This creates a dependency on the user to keep the updates flowing up to GitHub when necessary.  
Describe the differences between forks, clones, and branches.  When would you use one instead of another?  Forks are entire repositories that have been replicated on GitHub.  Clones are entire repositories that have been either downloaded or created on GitHub.  Branches are created in repositories to allow for safe coding spaces to occur without affecting the operational or most often times referred to as the master code.  Forking is used instead of cloning when you want to preserve the originators work and maybe down the line suggest changes back to the originator.  Cloning is used when you would take the project and use it without the intent of suggesting changes to the originator, and commpletly owning or taking over the code respository to be used for your purposes.  
What is the benefit of having a copy of the last known state of the remote stored locally?  Having the last known state stored locally allows you to witness the difference between the branch that you are working on and the most up to date copy of the code in the GitHub repository.  
How would you colloborate without using Git or GitHub/  What would be easier, and what would be harder?  I think using GitHub requires a pretty steep learning curve to understand and be able to navigate through the functions.  However, once you learn how to use Git and GitHub, I don't thin there is anything out there that compares.  It trully give you maximum flexibility and control.  I could use google docs paired with google sheets to keep track of changes and collobaration, but I would need to teach the metholody to other collaborators, as well as enforce the methodology.  It would be a mess. 
When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?  Making changes in a seperate branch allows you to preserve the master code or master branch.  This preserves the ability to colloborate with others and allows you to initiate pull requests, providing a second person check on the branched code, before perturbing the baseline.  Making changes directly in master is a little more seamless and quick, but is not always the best when collaborating with others.  